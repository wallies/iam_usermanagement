{
  "name": "node-cluster",
  "version": "0.1.18",
  "author": {
    "name": "Aleafs Zhang",
    "url": "zhangxc83@gmail.com"
  },
  "homepage": "https://github.com/aleafs/node-cluster",
  "description": "A graceful node library to contribute a permanent \"master-worker\" server.",
  "keywords": [
    "cluster",
    "child-process",
    "master-worker"
  ],
  "dependencies": {},
  "engines": {
    "node": ">=0.6.6"
  },
  "main": "lib/cluster.js",
  "devDependencies": {
    "connect": "=1.8.5",
    "should": ">=0.4.2",
    "mocha": ">=0.9.0",
    "jscoverage": ">=0.1.1"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/aleafs/node-cluster.png)](http://travis-ci.org/aleafs/node-cluster)\n\nThis logo is on the other side of the GFW!\n\n# 特性\n\n`node-cluster` 是一个简单易用的 NodeJS 类库，帮助开发人员快速地搭建基于NodeJS的服务程序：\n\n* 基于 master + worker 模式，能够有效利用多核处理器;\n* 支持多端口监听，master 传递请求端的 socket fd 给各个 worker，性能损失极低;\n* 同一端口下的多个 worker 之间提供简单的负载均衡支持;\n* 支持对 worker 进程数的监控，支持单个 worker 根据已处理的请求数自动消亡;\n* 支持 master 和 worker 的平滑重启 (SIGTERM)，不丢失请求;\n* 支持通过向 master 发送 SIGUSR1 信号实现所有worker的自动重载.\n\n# 安装\n\n```bash\n$ npm install node-cluster\n```\n\n# 使用\n\nnode-cluster的调用十分简单，核心调用代码不超过10行。请看下面的调用方法。  \ndispatch.js:\n\n```javascript\nvar cluster = require('node-cluster');\n\nvar master = new cluster.Master();\nmaster.register(8080, 'app.js');\nmaster.on('restartgiveup', function(port, msg) {\n  // alert:\n}).dispatch();\n```\n\napp.js：\n\n```javascript\nvar cluster = require('node-cluster');\nvar server  = require('http').createServer(function (req, res) {\n  // TODO\n});\n\nvar worker = new cluster.Worker();\nworker.ready(function (socket) {\n  server.emit('connection', socket);\n});\n```\n\n执行：`node dispatch.js`即可。\n\n# 示例\n\ndemo目录下提供了一个典型的示例，你可以通过下列命令启动这个服务：\n\n```bash\n$ node demo/main.js &\n```\n\n其中:\n\n* main.js 是master进程，通过 register 方法注册 worker进程，并通过 dispatch 进行工作; 除此之外，master 进程不需要做任何工作，你就可以实现一个高稳定性的生产服务;\n* worker/http.js 提供了监听在 33749 端口上的 HTTP 服务; 通过NodeJS 原生的http模块实现，demo中仅提供了 hello world的示例;\n* worker/echo.js 提供监听在 8080 端口上的Socket应答服务.\n* worker/multi_port_http.js 提供了监听在 33750 和 33751 端口上的 HTTP 服务; 通过NodeJS 原生的http模块实现，demo中仅提供了 hello world的示例;\n\n## 结合 [connect](https://github.com/senchalabs/connect) 使用\n\n* [dispatch.js](/fengmk2/node-cluster/blob/master/demo/connect/dispatch.js)\n\n```javascript\nvar cluster = require('node-cluster');\n\nvar master = cluster.Master();\nmaster.register(19841, __dirname + '/app.js').dispatch();\n```\n\n* [app.js](/fengmk2/node-cluster/blob/master/demo/connect/app.js)\n\n```javascript\nvar cluster = require('node-cluster');\nvar connect = require('connect');\n\nvar app = connect(connect.static(__dirname));\n\napp.use(function(req, res) {\n  res.end(req.url + ', pid ' + process.pid);\n});\n\nvar admin = cluster.Worker();\nadmin.ready(function(socket) {\n  app.emit('connection', socket);\n});\n```\n\n* start \n\n```bash\n$ node demo/connect/dispatch.js\n```\n\n## 结合 [webjs](https://github.com/iwillwen/webjs) 开发\n\nwebjs原生支持node-cluster哦，亲~\n                                ————小问  \n修改步骤十分简单，在webjs生成的代码中：\n\n- server.js\n\n```javascript\nvar cluster = require('node-cluster');\n\nvar master = new cluster.Master();\nmaster.register(80, __dirname + 'controllers/index.js').dispatch();\n```\n\n- /controllers/index.js\n\n  增加以下代码\n\n```javascript\nvar cluster = require('node-cluster');\n\nweb.run(65536);  //把原本的80改成其他端口，以免冲突\n\nvar worker = cluster.Worker();\nworker.ready(function(socket) {\n    web.server.emit('connection', socket);\n});\n```\n\n## 结合[express](https://github.com/visionmedia/express)\n\n感谢[@yuest](https://github.com/yuest) 提供[Express使用说明](https://github.com/aleafs/node-cluster/issues/6#issuecomment-4516724).\n\n```javascript\nvar app = require('express').createServer()\napp.get('/error', function(req, res, next) {\n next(new Error('error'));\n});\napp.error(function(err, req, res) {\n res.statusCode = 500;\n res.end(err.message);\n});\n\n//app.listen(8080); //没问题\n\n//使用 node-cluster 有问题\n//因为 app 没有触发 listening\n//可以在此加一句\n//app.emit('listening');\n\nvar worker = require('node-cluster').Worker();\nworker.ready(function(socket) {\n app.emit('connection', socket);\n});\n```\n\n不过推荐不使用 `app.error`，而用 `app.use(function(err, req, res, next) {})` 四个参数的 `middleware`\nexpress 3.0 会去掉 `app.error`\n\n# 原理\n\n请参考我的同事windyrobin的这篇文章：\n[NodeJs 多核多进程并行框架实作](http://club.cnodejs.org/topic/4f16442ccae1f4aa27001081) \n\n本文的 `node-cluster` 在核心功能的实现原理上没有任何新意，只是对代码的组织做了更友好的封装，同时加入了一些基于稳定性考虑的特性.\n\n# 注意\n\n* worker 进程中的 `remain` 变量，是判断一个 worker 是否空闲的依据; 因此我强烈建议在你的应用程序 worker 进程中，采用更优雅的幂等操作对其计数，并且通过 `worker.release(remain)` 的方法回写;\n\n# Authors\n\nBelow is the output from `git-summary`.\n\n```\n project: node-cluster\n commits: 98\n files  : 18\n authors: \n    73  aleafs                  74.5%\n    11  fengmk2                 11.2%\n     6  Jackson Tian            6.1%\n     6  aleafs zhang            6.1%\n     1  Will Wen Gunn           1.0%\n     1  pengchun                1.0%\n\n```\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011-2012 aleafs and other node-cluster contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "node-cluster@0.1.18",
  "_from": "node-cluster@~0.1.18"
}
